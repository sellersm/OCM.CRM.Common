<GlobalChangeSpec
	xmlns="bb_appfx_globalchange"
	xmlns:common="bb_appfx_commontypes"
	ID="6dfddd37-2fc6-4868-a6ca-c8d04f6752e9"
	Name="Interaction Attribute Global Change"
	Description="Interaction Attribute Global Change"
	Author="Bill Elfstrom"
	DisplayName="Change Interaction Attributes Except Code Tables"
	GlobalChangeFolder="Interaction\Attribute"
	SPName="USR_USP_INTERACTIONATTRIBUTEGLOBALCHANGE"
>
<!-- 
 
  History:
    Date            Modified By     Comments
    09-June-2012    BElfstrom       Created
    
  Comments:
    The query used by this procedure returns a set of Interaction IDs.  The attribute
    tables also use the Interaction ID or ID value (depending on the
    attribute type) as the primary key to identify
    which interaction an attribute is attached to.  The attribute records are spread 
    across various attribute tables.  Each attribute has its own table and unique table name
    in the format ATTRIBUTExxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx where x is the
    GUID of the attribute category with the dashes removed.
    
    This procedure builds the attribute table name using input from the user.
    
    Note: Attributes categories that are designated as "allow only one per record" use the
    ID field to link to the parent Interaction.  Categories that allow more than one attribute
    per record use the INTERACTIONID as the field to link to the parent Interaction record.
    
-->
  <!-- describe the SP that performs the global change operation -->
  <CreateProcedureSQL>
    <![CDATA[
create procedure dbo.USR_USP_INTERACTIONATTRIBUTEGLOBALCHANGE
(
	@CHANGEAGENTID uniqueidentifier = null,
	@ASOF as datetime = null,
	@NUMBERADDED int = 0 output,
	@NUMBEREDITED int = 0 output,
	@NUMBERDELETED int = 0 output,
  
  @IDSETREGISTERID uniqueidentifier = null,
	@ATTRIBUTECATEGORYID uniqueidentifier = null,
  @VALUEATTRIBUTETOREPLACE nvarchar(255) = '',
  @NEWVALUEATTRIBUTEENTRY nvarchar(255) = '',
  @VALUEATTRIBUTEPROCESS nvarchar(1) = null,
  @SPACE1 nvarchar(1),
  
  @COMMENTATTRIBUTEPROCESS nvarchar = null,
  @COMMENTTOREPLACE nvarchar(255) = null,
  @NEWCOMMENT nvarchar(255) = null,
  @SPACE2 nvarchar(1),
  
  @STARTDATEATTRIBUTEPROCESS nvarchar = null,
  @STARTDATETOREPLACE nvarchar(255) = null,
  @NEWSTARTDATE nvarchar(255) = null,
  @SPACE3 nvarchar(1),
  
  @ENDDATEATTRIBUTEPROCESS nvarchar = null,
  @ENDDATETOREPLACE nvarchar(255) = null,
  @NEWENDDATE nvarchar(255) = null,
  @SPACE4 nvarchar(1) 
)

as		

	set nocount off;
  
	declare @CURRENTDATE datetime
  declare @ATTRIBUTE_TABLE_NAME as nvarchar(41)
  declare @VALUE_IS_NUMERIC as bit
  declare @GET_VALUE_DATATYPE_STRING as nvarchar(max)
  declare @SQL as nvarchar(max) = null
  declare @DATATYPE as tinyint = null
  declare @SQL_SET as nvarchar(max) = null
  declare @UPDATE_COUNT as int = 0
  declare @UPDATE_COUNT_STRING as nvarchar(max)
  declare @ONLYALLOWONEPERRECORD bit = null
  
  declare @DATATYPE_TEXT tinyint = 0
  declare @DATATYPE_NUMERIC tinyint = 1
  declare @DATATYPE_DATE tinyint = 2
  declare @DATATYPE_MONEY tinyint = 3
  declare @DATATYPE_BOOLEAN tinyint = 4
    
  declare @REPLACE_SPECIFIC_VALUE tinyint = 1
  declare @REPLACE_ALL tinyint = 2
  declare @SET_ALL_TO_BLANK tinyint = 3
  declare @REPLACE_IF_BLANK tinyint = 4
  declare @TRUE bit = 1
    
	set @CURRENTDATE = getdate();
	set @NUMBERADDED = 0;
	set @NUMBEREDITED = 0;
	set @NUMBERDELETED = 0; 
	
	if @CHANGEAGENTID is null
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output;

  if @IDSETREGISTERID is null
	  raiserror ('IDSETREGISTERID is required',13,1);	
 
	-- do the global change operation here, and set @NUMBERADDED, @NUMBEREDITED, and/or @NUMBERDELETED as appropriate
 
  begin try

  set @ATTRIBUTE_TABLE_NAME = 'ATTRIBUTE' + replace(cast(@ATTRIBUTECATEGORYID as varchar(36)),'-','')


  /* Deal with the data types  */
  
    if not @VALUEATTRIBUTEPROCESS is null
    begin
  
        select @DATATYPE = DATATYPECODE, @ONLYALLOWONEPERRECORD = ONLYALLOWONEPERRECORD 
        from dbo.ATTRIBUTECATEGORY ac where ac.ID = @ATTRIBUTECATEGORYID
        
        if @DATATYPE is null or @ONLYALLOWONEPERRECORD is null
          raiserror 50001 'An error occured Either DATATYPE or ONLYALLOWONEPERRECORD is null.'
   
        
        /* Convert yes/no or true/false to 1 or 0  */
        if @DATATYPE = @DATATYPE_BOOLEAN
          begin
          if @VALUEATTRIBUTETOREPLACE <> ''
            set @VALUEATTRIBUTETOREPLACE = dbo.USR_UFN_CONVERTTEXTTOBOOLEAN(@VALUEATTRIBUTETOREPLACE)          
          if @NEWVALUEATTRIBUTEENTRY <> ''
            set @NEWVALUEATTRIBUTEENTRY = dbo.USR_UFN_CONVERTTEXTTOBOOLEAN(@NEWVALUEATTRIBUTEENTRY)
          end
  
  
  /* VALUE field - cannot be null */
  
      if @VALUEATTRIBUTEPROCESS = @REPLACE_SPECIFIC_VALUE
            if @DATATYPE = @DATATYPE_NUMERIC or @DATATYPE = @DATATYPE_MONEY
                begin
                set @SQL_SET = COALESCE(@SQL_SET,'') + 'VALUE = case when VALUE = ' + @VALUEATTRIBUTETOREPLACE + 
                ' then ' + @NEWVALUEATTRIBUTEENTRY + ' else VALUE end, '
                set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'VALUE = ' + @VALUEATTRIBUTETOREPLACE + ' or '
                end
            else 
                if @DATATYPE = @DATATYPE_TEXT or @DATATYPE = @DATATYPE_DATE
                  begin
                  set @SQL_SET = COALESCE(@SQL_SET,'') + 'VALUE = case when VALUE = ' + '''' + @VALUEATTRIBUTETOREPLACE + '''' +
                  ' then ' + '''' + @NEWVALUEATTRIBUTEENTRY + '''' + ' else VALUE end, '
                  set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'VALUE = ' + '''' + @VALUEATTRIBUTETOREPLACE + '''' + ' or '
                  end
                else
                  if @DATATYPE = @DATATYPE_BOOLEAN
                    begin
                    set @SQL_SET = COALESCE(@SQL_SET,'') + 'BOOLEANCODE = case when BOOLEANCODE = ' + @VALUEATTRIBUTETOREPLACE +
                    ' then ' + @NEWVALUEATTRIBUTEENTRY + ' else BOOLEANCODE end, '
                    set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'BOOLEANCODE = ' + @VALUEATTRIBUTETOREPLACE + ' or '
                    end
                  
            
       if @VALUEATTRIBUTEPROCESS = @REPLACE_ALL
            if @DATATYPE = @DATATYPE_NUMERIC or @DATATYPE = @DATATYPE_MONEY
              begin
              set @SQL_SET = COALESCE(@SQL_SET,'') + 'VALUE = ' + @NEWVALUEATTRIBUTEENTRY + ', '
              set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'VALUE = VALUE or '
              end
            else
              if @DATATYPE = @DATATYPE_TEXT or @DATATYPE = @DATATYPE_DATE
                begin
                set @SQL_SET = COALESCE(@SQL_SET,'') + 'VALUE = ' + '''' + @NEWVALUEATTRIBUTEENTRY + '''' + ', '
                set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'VALUE = VALUE or '
                end
              else
                  if @DATATYPE = @DATATYPE_BOOLEAN
                  begin
                  if @NEWVALUEATTRIBUTEENTRY <> '1' and @NEWVALUEATTRIBUTEENTRY <> '0' 
                    raiserror 50001 'You must enter a new value.'
                  if @VALUEATTRIBUTETOREPLACE <> ''
                    raiserror 50001 'Value to replace must be blank with this global change.'
                  set @SQL_SET = COALESCE(@SQL_SET,'') + 'BOOLEANCODE = ' +  @NEWVALUEATTRIBUTEENTRY + ', '
                  set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'BOOLEANCODE = BOOLEANCODE or '
                  end                

              
       if @VALUEATTRIBUTEPROCESS = @SET_ALL_TO_BLANK      
            if @DATATYPE = @DATATYPE_TEXT
              begin
              set @SQL_SET = COALESCE(@SQL_SET,'') + 'VALUE = ' + '''' + '''' + ', '
              set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'VALUE = VALUE or '
              end
            else
              raiserror 50001 'Only text type value fields can be set to blank.'
  
  
       if @VALUEATTRIBUTEPROCESS = @REPLACE_IF_BLANK    
            if @DATATYPE = @DATATYPE_TEXT
              begin
              set @SQL_SET = COALESCE(@SQL_SET,'') + 'VALUE = case when VALUE = ' + '''' + '''' +' then ' +
              @NEWVALUEATTRIBUTEENTRY + ' else VALUE end, ' 
              set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'VALUE = ' + '''' + '''' + ' or '
              end
            else
              raiserror 50001 'Only text type value fields can be replaced if blank.'
    end
  
  
  /* COMMENT field  */

    if not @COMMENTATTRIBUTEPROCESS is null
    begin
  
       if @COMMENTATTRIBUTEPROCESS =   @REPLACE_SPECIFIC_VALUE
           begin
           set @SQL_SET = COALESCE(@SQL_SET,'') + 'COMMENT = case when COMMENT = ' + '''' + @COMMENTTOREPLACE + '''' + 
            ' then ' + '''' + @NEWCOMMENT + '''' + ' else COMMENT end, '      
           set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COMMENT = ' + '''' + @COMMENTTOREPLACE + '''' + ' or '
           end
           
       if @COMMENTATTRIBUTEPROCESS = @REPLACE_ALL   
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'COMMENT = ' + '''' +  @NEWCOMMENT + '''' + ', '
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COMMENT = COMMENT or '
          end
          
      if @COMMENTATTRIBUTEPROCESS = @SET_ALL_TO_BLANK
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'COMMENT = ' + '''' +  '''' + ', '
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COMMENT = COMMENT or '
          end
          
       if @COMMENTATTRIBUTEPROCESS = @REPLACE_IF_BLANK
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'COMMENT = case when COMMENT = ' + '''' + '''' + 
          ' then ' +  '''' + @NEWCOMMENT + '''' + ' else COMMENT end, '             
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COMMENT = ' + '''' + '''' + ' or '
          end
    end 

 /* START DATE field  */

    if not @STARTDATEATTRIBUTEPROCESS is null
    begin
  
        if @STARTDATEATTRIBUTEPROCESS = @REPLACE_SPECIFIC_VALUE
          begin
          if @NEWSTARTDATE is not null
            set @SQL_SET = COALESCE(@SQL_SET,'') + 'STARTDATE = case when STARTDATE = ' + '''' + @STARTDATETOREPLACE + '''' +
            ' then ' + '''' + @NEWSTARTDATE + '''' + ' else STARTDATE end, ' 
          else
            set @SQL_SET = COALESCE(@SQL_SET,'') + 'STARTDATE = case when STARTDATE = ' + '''' + @STARTDATETOREPLACE + '''' +
            ' then null else STARTDATE end, ' 
          
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'STARTDATE = ' + '''' + @STARTDATETOREPLACE + '''' + ' or '
          end
          
       if @STARTDATEATTRIBUTEPROCESS = @REPLACE_ALL     
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'STARTDATE = ' + '''' +  @NEWSTARTDATE + '''' + ', '
          -- Must use colesce because value may be null
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COALESCE(STARTDATE,' + '''' + '''' + ') = COALESCE(STARTDATE,' + '''' + '''' + ')' + ' or '
          end
          
      if @STARTDATEATTRIBUTEPROCESS = @SET_ALL_TO_BLANK
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'STARTDATE = null, '
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COALESCE(STARTDATE,' + '''' + '''' + ') = COALESCE(STARTDATE,' + '''' + '''' + ')' + ' or '
          end

       if @STARTDATEATTRIBUTEPROCESS = @REPLACE_IF_BLANK
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'STARTDATE = case when STARTDATE is null then ' 
          + '''' +  @NEWSTARTDATE + '''' + ' else STARTDATE end, '    
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'STARTDATE is null ' + ' or '
          end
          
  end 

 /* END DATE field  */

    if not @ENDDATEATTRIBUTEPROCESS is null
    begin
  
       if @ENDDATEATTRIBUTEPROCESS = @REPLACE_SPECIFIC_VALUE
          begin
          if @NEWENDDATE is not null
            set @SQL_SET = COALESCE(@SQL_SET,'') + 'ENDDATE = case when ENDDATE = ' + '''' + @ENDDATETOREPLACE + '''' +
            ' then ' + '''' + @NEWENDDATE + '''' + ' else ENDDATE end, '      
          else
            set @SQL_SET = COALESCE(@SQL_SET,'') + 'ENDDATE = case when ENDDATE = ' + '''' + @ENDDATETOREPLACE + '''' +
            ' then null else ENDDATE end, '      
          
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'ENDDATE = ' + '''' + @ENDDATETOREPLACE + '''' + ' or '      
          end
          
       if @ENDDATEATTRIBUTEPROCESS = @REPLACE_ALL
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'ENDDATE = ' + '''' +  @NEWENDDATE + '''' + ', '
          -- Must use colesce because value may be null
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COALESCE(ENDDATE,' + '''' + '''' + ') = COALESCE(ENDDATE,' + '''' + '''' + ')' + ' or '
          end
          
       if @ENDDATEATTRIBUTEPROCESS = @SET_ALL_TO_BLANK    
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'ENDDATE = null, '
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'COALESCE(ENDDATE,' + '''' + '''' + ') = COALESCE(ENDDATE,' + '''' + '''' + ')' + ' or '
          end
          
       if @ENDDATEATTRIBUTEPROCESS = @REPLACE_IF_BLANK
          begin
          set @SQL_SET = COALESCE(@SQL_SET,'') + 'ENDDATE = case when ENDDATE is null then ' 
          + '''' +  @NEWENDDATE + '''' + ' else ENDDATE end, '   
          set @UPDATE_COUNT_STRING = COALESCE(@UPDATE_COUNT_STRING,'') + 'ENDDATE is null ' + ' or '
          end

    end

  /* Build the full SQL string */
  
  set @UPDATE_COUNT_STRING = '@NUMBER_OF_RECORDS_UPDATED = case when ' + 
  left(@UPDATE_COUNT_STRING, len(@UPDATE_COUNT_STRING)-3) + 
  ' then @NUMBER_OF_RECORDS_UPDATED + 1 else @NUMBER_OF_RECORDS_UPDATED end'
 
 
  /* Set the Interaction parent ID field  */
  
  if @ONLYALLOWONEPERRECORD = @TRUE
    set @SQL = 'update atn set ' + 
    @SQL_SET + @UPDATE_COUNT_STRING + ' from ' + @ATTRIBUTE_TABLE_NAME + ' as atn' +
    ' join UFN_IDSETREADER_GETRESULTS(' + '''' + convert(varchar(38),@IDSETREGISTERID) + '''' + 
    ') as selection on atn.ID = selection.ID;'
  else
    set @SQL = 'update atn set ' + 
    @SQL_SET + @UPDATE_COUNT_STRING + ' from ' + @ATTRIBUTE_TABLE_NAME + ' as atn' +
    ' join UFN_IDSETREADER_GETRESULTS(' + '''' + convert(varchar(38),@IDSETREGISTERID) + '''' + 
    ') as selection on atn.INTERACTIONID = selection.ID;'
 

  exec sp_executesql
  @stmt = @SQL,
  @params = N'@NUMBER_OF_RECORDS_UPDATED as int OUTPUT',
  @NUMBER_OF_RECORDS_UPDATED = @NUMBEREDITED OUTPUT;
   
  end try
	
	begin catch
  
    -- Raise an error with the details of the exception
    declare @ErrMsg nvarchar(4000), @ErrSeverity int
    select @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY()
    raiserror(@ErrMsg, @ErrSeverity, 1)
    
		return 1;
	end catch 

		]]>

  </CreateProcedureSQL>

  <ParametersFormMetaData>

    <!-- describe fields on the parameter form, which correspond to parameters on the SP.  Note that system parameters 
		like the context @CHANGEAGENTID, @ASOF, @NUMBERADDED, @NUMBEREDITED, and @NUMBERDELETED need not be listed. -->
    <FormMetaData xmlns="bb_appfx_commontypes">
      <FormFields>
        <FormField FieldID="IDSETREGISTERID" DataType="Guid" Required="true" Caption="Selection" CaptionResourceKey="$$selection">
          <SearchList SearchListID="98d0070e-c4a7-495b-a438-2ac12da79068" EnableQuickFind="true">
            <FormFieldOverrides>
              <FormFieldOverride FieldID="RECORDTYPEID" Caption="Record type" ReadOnly="true" DefaultValueText="Fields!RECORDTYPEID" />
            </FormFieldOverrides>
          </SearchList>
        </FormField>
        <FormField FieldID="ATTRIBUTECATEGORYID" DataType="Guid" Required="true" Caption="Category" CaptionResourceKey="$$category">
          <SimpleDataList SimpleDataListID="e097b9b4-bb16-42e8-a5ef-147f334aafd6">
            <Params>
              <Param ID="RECORDTYPE">
                <Value>Interaction</Value>
              </Param>
            </Params>
          </SimpleDataList>
        </FormField>
        <FormField FieldID="SPACE1" Hidden="true"/>
        <FormField FieldID="VALUEATTRIBUTEPROCESS" DataType="TinyInt" Required="false" Caption="What Value change do you want to make" DefaultValueText="0" CaptionResourceKey="$$status">
          <ValueList>
            <Items>
              <Item>
                <Value>1</Value>
                <Label>Replace specific Value with new Value</Label>
              </Item>
              <Item>
                <Value>2</Value>
                <Label>Replace Value for all interactions in query</Label>
              </Item>
              <Item>
                <Value>3</Value>
                <Label>Replace Value with blank for all attributes in query</Label>
              </Item>
              <Item>
                <Value>4</Value>
                <Label>Replace any blank Values with new Value for all attributes in query</Label>
              </Item>
            </Items>
          </ValueList>
        </FormField>
        <FormField FieldID="VALUEATTRIBUTETOREPLACE" Caption="Value to replace" CaptionResourceKey="$$attribute" />
        <FormField FieldID="NEWVALUEATTRIBUTEENTRY" Caption="New Value" CaptionResourceKey="$$attribute" />
        <FormField FieldID="SPACE2" Hidden="true"/>
        <FormField FieldID="COMMENTATTRIBUTEPROCESS" DataType="TinyInt" Required="false" Caption="What Comment change do you want to make?" DefaultValueText="0" CaptionResourceKey="$$status">
          <ValueList>
            <Items>
              <Item>
                <Value>1</Value>
                <Label>Replace Comment with new Comment or blank</Label>
              </Item>
              <Item>
                <Value>2</Value>
                <Label>Replace Comment for all interactions in query</Label>
              </Item>
              <Item>
                <Value>3</Value>
                <Label>Replace Comment with blank for attributes in query</Label>
              </Item>
              <Item>
                <Value>4</Value>
                <Label>Replace blank Comments with new Comment for all attributes in query</Label>
              </Item>
            </Items>
          </ValueList>
        </FormField>
        <FormField FieldID="COMMENTTOREPLACE" Caption="Comment to replace" CaptionResourceKey="$$comment" />
        <FormField FieldID="NEWCOMMENT" Caption="New Comment" CaptionResourceKey="$$comment" />
        <FormField FieldID="SPACE3" Hidden="true"/>
        <FormField FieldID="STARTDATEATTRIBUTEPROCESS" DataType="TinyInt" Required="false" Caption="What Start Date change do you want to make?" DefaultValueText="0" CaptionResourceKey="$$status">
          <ValueList>
            <Items>
              <Item>
                <Value>1</Value>
                <Label>Replace Start Date with new Start Date or blank</Label>
              </Item>
              <Item>
                <Value>2</Value>
                <Label>Replace Start Date for all interactions in query</Label>
              </Item>
              <Item>
                <Value>3</Value>
                <Label>Replace Start Date with blank for all interactions in query</Label>
              </Item>
              <Item>
                <Value>4</Value>
                <Label>Replace blank Start Date with new Start Date for all interactions in query</Label>
              </Item>
            </Items>
          </ValueList>
        </FormField>
        <FormField FieldID="STARTDATETOREPLACE" Caption="Start Date to replace" DataType="Date"  CaptionResourceKey="$$attribute" />
        <FormField FieldID="NEWSTARTDATE" Caption="New Start Date" DataType="Date" CaptionResourceKey="$$attribute" />
        <FormField FieldID="SPACE4" Hidden="true"/>
        <FormField FieldID="ENDDATEATTRIBUTEPROCESS" DataType="TinyInt" Required="false" Caption="What End Date change do you want to make?" DefaultValueText="0" CaptionResourceKey="$$status">
          <ValueList>
            <Items>
              <Item>
                <Value>1</Value>
                <Label>Replace End Date with new End Date or blank</Label>
              </Item>
              <Item>
                <Value>2</Value>
                <Label>Replace End Date for all interactions in query</Label>
              </Item>
              <Item>
                <Value>3</Value>
                <Label>Replace End Date with blank for all interactions in query</Label>
              </Item>
              <Item>
                <Value>4</Value>
                <Label>Replace blank End Date with new End Date for all interactions in query</Label>
              </Item>
            </Items>
          </ValueList>
        </FormField>
        <FormField FieldID="ENDDATETOREPLACE" Caption="End Date to replace" DataType="Date" CaptionResourceKey="$$attribute" />
        <FormField FieldID="NEWENDDATE" Caption="New End Date" DataType="Date" CaptionResourceKey="$$attribute" />
      </FormFields>
      <!-- indicate the client-side component for the user interface
			<common:FormUIComponent FormUIComponentType="CustomComponent">
				<common:CustomComponentID AssemblyName="REPLACE_WITH_ASSEMBLYNAME" ClassName="REPLACE_WITH_FULLCLASSNAME" />
			</common:FormUIComponent>
      -->
    </FormMetaData>
  </ParametersFormMetaData>
</GlobalChangeSpec>
