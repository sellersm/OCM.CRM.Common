<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="ecbfc188-e2cd-4634-b047-019053b49e79"
	Name="USR_USP_SPONSORLETTERSCANNER_CRM"
	Description="Does the work for CRM Sponsor letter scanner."
	Author="Memphis Sellers"
	SPName="USR_USP_SPONSORLETTERSCANNER_CRM"
	GrantServiceRolePermission="true"	
	>

	<!-- 
	Remarks:    

	History:
	Date            Modified By     Comments
	09-Jan-2013		Memphis			Added check for the sponsor when checking if cancelled or not. Fogbugz Case 958.
	15-Apr-2013		Memphis			Fogbugz Case 1055. 	Fogbugz Case 1063.  Fogbugz Case 1062.
	-->	
	
	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_SPONSORLETTERSCANNER_CRM
@SponsorLookupID nvarchar(6),		-- **CHANGE TO 6 WHEN DONE TESTING**
@ChildLookupID nvarchar(7),		-- **CHANGE TO 7 WHEN DONE TESTING**
--@ChildProjectLookupID nvarchar(6), -- **CHANGE TO 6 WHEN DONE TESTING**
--@InteractionSequenceId int,
@ChangeAgentID uniqueidentifier,
@ItemsEnclosedCode as uniqueidentifier,
@ScanSession nvarchar(68),
@ScannerMessage nvarchar(1000) OUTPUT,
@ScanOutcome nvarchar(1000) OUTPUT,
@ExceptionOccurred bit OUTPUT

as
begin

declare @CancellationReason as nvarchar(100)
declare @ChildAcknowledgementLetterSubcategoryID as uniqueidentifier
declare @ChildID as uniqueidentifier
declare @OriginalInteractionID as uniqueidentifier
declare @OriginalLetterSequenceID as int
declare @OriginalLetterSubcategoryID as uniqueidentifier
declare @CurrentChildProjectID as uniqueidentifier		-- holds the current project id of the child, used to compare if child changed projects
--declare @BarcodeChildProjectID uniqueidentifier			-- holds the projectId of the child based on the @ChildProjectLookupID parameter passed in
declare @ConstituentID uniqueidentifier
declare @CurrentDate as datetime
declare @Date as datetime
declare @DateSponsorshipCancelled as datetime
declare @ErrMsg nvarchar(4000)
declare @ErrSeverity int
declare @ExtraLetter as bit
declare @InteractionTypeCode as uniqueidentifier	
declare @LogTypeCode as tinyint
declare @NewID as uniqueidentifier
declare @NumberOfDaysSponsored smallint
declare @SponsorID as uniqueidentifier
declare @SponsorLetterSequenceID as int
declare @SponsorLetterSubcategoryID as uniqueidentifier
declare @StatusCodeCompleted as tinyint
declare @StatusCodePending as tinyint
declare @TempTable TABLE(SponsorLetterSequenceID int)
--declare @TempTable TABLE(InteractionID uniqueidentifier, OriginalLetterSequenceID int)
--Expected Date is last day of month, 3 months in advance
declare @expectedDate date = Cast(DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE())+4,0)) as date);

-- Set constants
set @StatusCodeCompleted = 2
set @StatusCodePending = 1

set @ExtraLetter = 0
set @ExceptionOccurred = 0

if @ChangeAgentID is null
	exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @ChangeAgentID output;


-- validate Sponsor ID
if @ExceptionOccurred = 0
	begin
		set @SponsorID = (select ID from dbo.CONSTITUENT where LOOKUPID = @SponsorLookupID)
		if @SponsorID is null
			begin
				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Sponsor ID not found.'
				set @ExceptionOccurred = 1
			end
	end
	
-- validate Child ID
if @ExceptionOccurred = 0
	begin
		set @ChildID = (select ID from dbo.SPONSORSHIPOPPORTUNITY where LOOKUPID = @ChildLookupID)
		If @ChildID is null
			begin
				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child ID not found.'
				set @ExceptionOccurred = 1
			end
	end


--get the child's project id so we can populate it in the interactionextension:
if @ExceptionOccurred = 0
	begin
		set @CurrentChildProjectID = (select SPONSORSHIPLOCATIONID from dbo.SPONSORSHIPOPPORTUNITY where ID = @ChildID)
	end

-- get the Child Project ID	
--if @ExceptionOccurred = 0
--	begin
--		-- get the Child Project ID
--		set @BarcodeChildProjectID = (select ID from dbo.SPONSORSHIPLOCATION where LOOKUPID = @ChildProjectLookupID)
--		if @BarcodeChildProjectID is null
--			begin
--				set @ExceptionOccurred = 1
--				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child Project ID not found.'
--			end
--	end	


-- Get the CRM Subcategory IDs used later when creating the interactions.
-- Sponsor Letter type:
if @ExceptionOccurred = 0
	begin
		set @SponsorLetterSubcategoryID = (select ID from dbo.INTERACTIONSUBCATEGORY where LOWER(NAME) = 'sponsor letter')
		if @SponsorLetterSubcategoryID is null
			begin
				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Sponsor Letter Type not found.'
				set @ExceptionOccurred = 1
			end
	end

-- Child Acknowledgement Letter type
if @ExceptionOccurred = 0
	begin
		set @ChildAcknowledgementLetterSubcategoryID = (select ID from dbo.INTERACTIONSUBCATEGORY where LOWER(NAME) = 'child acknowledgement letter')
		if @ChildAcknowledgementLetterSubcategoryID is null
			begin
				set @ExceptionOccurred = 1
				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child Acknowledgement Letter not found.'
			end
	end

-- begin tran here since we are about to update and create records
begin try
begin tran

-- 1.1 Create "Sponsor Letter" interaction for Sponsor, no matter what, if we have a valid sponsorId value:
if @ExceptionOccurred = 0
	begin
		-- Get type code of 'Mail'
		set @InteractionTypeCode = (select ID from dbo.INTERACTIONTYPECODE where LOWER(DESCRIPTION) = 'mail')
		set @Date = CONVERT(DATE,GETDATE())		
		set @NewID = NEWID()
		
		-- Insert and save the just created sequence ID for the Acknowledgement Letter creation
		INSERT INTO dbo.INTERACTION(
			ID
			,CONSTITUENTID
			,INTERACTIONTYPECODEID
			,EXPECTEDDATE
			,ACTUALDATE
			,STATUSCODE
			,INTERACTIONSUBCATEGORYID
			,OBJECTIVE
			,ADDEDBYID
			,CHANGEDBYID
			,DATEADDED
			,DATECHANGED)
			OUTPUT INSERTED.SEQUENCEID INTO @TempTable
		VALUES(
			@NewID
			,@SponsorID
			,@InteractionTypeCode
			,@Date
			,@Date
			,@StatusCodeCompleted
			,@SponsorLetterSubcategoryID
			,'Sponsor Letter'
			,@ChangeAgentID
			,@ChangeAgentID
			,GETDATE()
			,GETDATE()
			)

		INSERT INTO dbo.USR_INTERACTIONEXTENSION(
			ID
			,COMPLETEDBYID
			,CHILDID
			,SCANSESSION
			,ORIGINALLETTERSUBCATEGORYID
			,ORIGINALLETTERSEQUENCEID
			,CHILDPROJECTID
			,ITEMSENCLOSEDCODEID
			,ADDEDBYID
			,CHANGEDBYID
			,DATEADDED
			,DATECHANGED
			)
		VALUES (
			@NewID
			,@ChangeAgentID
			,@ChildID
			,@ScanSession
			,NULL
			,0
			,@CurrentChildProjectID
			,@ItemsEnclosedCode
			,@ChangeAgentID
			,@ChangeAgentID
			,GETDATE()
			,GETDATE()
			)

		-- call 'add child to interaction sproc' from Cary here, to get the child info in this interaction:
		if @ChildID is not null
		begin
			exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILD
				@interactionID = @NewID,
				@sponsorshipOpportunityChildID = @ChildID,
				@changeAgentID = @ChangeAgentID
		end

		-- @SponsorLetterSequenceID used in Child Acknowledgement Letter creation
		select TOP 1 @SponsorLetterSequenceID = SponsorLetterSequenceID
		from @TempTable	
	
		Set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Sponsor Letter interaction completed.  '
	end


-- Child Acknowledgement Letter creation pre-check
if @ExceptionOccurred = 0
	begin
		-- note: we have to check for a not null REVENUESPLITID value to eliminate the possiblity of the 'duplicate' sponsorship data conversion issue!
		set @ConstituentID = (select CONSTITUENTID from dbo.SPONSORSHIP where SPONSORSHIPOPPORTUNITYID = @ChildID and STATUSCODE = 1 and REVENUESPLITID is not NULL)
		If @ConstituentID is null
			begin
				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child not currently sponsored.'
				set @ExceptionOccurred = 1
			end
		else
			-- Child check for change of sponsor
			If @ConstituentID <> @SponsorID -- scanned sponsor ID
				begin
					set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Current sponsor is not the same as the barcoded sponsor'
					set @ExceptionOccurred = 1
				end
			else
				-- Child departed (ineligible)
				--	when 0 then 'Pending', when 1 then 'Eligible',	when 2 then 'Ineligible'	
				if exists (select * from dbo.SPONSORSHIPOPPORTUNITY where ID = @ChildID and ELIGIBILITYCODE = 2)
					begin
						set @ExceptionOccurred = 1
						set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child currently ineligible status.'
					end
				
		----3.4 Does the Child Project on the barcode match the child’s current Project?
		----If NO:  alert current Project not match barcode project, goto 3A exception processing
		--if @ExceptionOccurred = 0
		--	begin
		--		-- get the Child Project ID
		--		-- set @CurrentChildProjectID = (select SPONSORSHIPLOCATIONID from dbo.SPONSORSHIPOPPORTUNITY where ID = @ChildID)
		--		--if @CurrentChildProjectID <> @BarcodeChildProjectID
		--		--	begin
		--		--		set @ExceptionOccurred = 1
		--		--		set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Current Child Project ID does not match barcode Project ID.'						
		--		--	end
		--	end
	end


-- Child Acknowledgement Letter - check for pending interactions
if @ExceptionOccurred = 0
	begin
		-- 2.1 Any Child Acknowledgement Letters in the expected month, based on the expected date variable set above?
		if exists(select ID 
			from dbo.INTERACTION 
			where (YEAR(@expectedDate) = YEAR(EXPECTEDDATE) and  MONTH(@expectedDate) = MONTH(EXPECTEDDATE))
			and @ChildID = CONSTITUENTID 
			and INTERACTIONSUBCATEGORYID = @ChildAcknowledgementLetterSubcategoryID
			and STATUSCODE = @StatusCodePending)
			begin
				set @ExtraLetter = 1
				set @ScannerMessage = coalesce(@ScannerMessage, '') + 'A Child Acknowledgement Letter interaction exists in the expected month.  No Child Acknowledgement Letter interaction was created.  '
				set @ScanOutcome = coalesce(@ScanOutcome, '') + 'Place letter in the Extra Letter stack.'
				set @ExceptionOccurred = 1
			end
	end


-- Create Child Acknowledgement Letter
if @ExceptionOccurred = 0
	begin
		set @Date = CONVERT(DATE,GETDATE())
		set @NewID = NEWID()

		INSERT INTO dbo.INTERACTION(
			ID
			,CONSTITUENTID
			,INTERACTIONTYPECODEID
			,EXPECTEDDATE
			,ACTUALDATE
			,STATUSCODE
			,INTERACTIONSUBCATEGORYID
			,OBJECTIVE
			,ADDEDBYID
			,CHANGEDBYID
			,DATEADDED
			,DATECHANGED
			)
		VALUES(
			@NewID
			,@ChildID
			,@InteractionTypeCode
			,@expectedDate
			,NULL
			,@StatusCodePending
			,@ChildAcknowledgementLetterSubcategoryID
			,'Child Acknowledgement Letter'
			,@ChangeAgentID
			,@ChangeAgentID
			,GETDATE()
			,GETDATE()
			)

		INSERT INTO dbo.USR_INTERACTIONEXTENSION(
		ID, 
		COMPLETEDBYID, 	
		CHILDID,
		SPONSORID, 
		SCANSESSION, 
		ORIGINALLETTERSUBCATEGORYID, 
		ORIGINALLETTERSEQUENCEID, 
		CHILDPROJECTID, 
		ADDEDBYID, 
		CHANGEDBYID, 
		DATEADDED, 
		DATECHANGED
		)
		VALUES (
		@NewID, 
		@ChangeAgentID, 
		@ChildID,
		@SponsorID,
		@ScanSession, 
		@SponsorLetterSubcategoryID,	--@OriginalLetterSubcategoryID, 
		@SponsorLetterSequenceID,		-- @OriginalLetterSequenceID, 
		@CurrentChildProjectID, 
		@ChangeAgentID, 
		@ChangeAgentID, 
		GETDATE(), 
		GETDATE()
		)

		set @ScannerMessage = coalesce(@ScannerMessage, '') + 'A Child Acknowledgement Letter interaction was created on the child account.  '
	end



-- SCAN LOG
-- Success
set @SponsorLetterSequenceID = coalesce(@SponsorLetterSequenceID,0)
set @Scannermessage = RTRIM(@ScannerMessage)
set @OriginalLetterSequenceID = coalesce(@OriginalLetterSequenceID, 0)

if @ExceptionOccurred = 0
	begin
		-- Fogbugz Case 1063: shorten the successful message.
		-- set @ScannerMessage = coalesce(@ScannerMessage, '') + 'The scan was a success.'
		set @ScannerMessage = 'The scan was a success. '
		set @LogTypeCode = 1 -- Success
		Set @ScanOutcome = 'Place letter on successful scan stack. '
		Set @NumberOfDaysSponsored = 0
		Set @CancellationReason = ''	
		
		insert into dbo.USR_LETTERSCANNERLOG(
		LOGTYPECODE
		,SCANSESSION
		,ORIGINALSEQUENCEID
		,[DESCRIPTION]
		,SCANOUTCOME
		,CHILDID
		,SPONSORID
		,CHILDPROJECTID
		,LETTERSUBCATEGORYID
		,DATESPONSORSHIPCANCELLED
		,NUMBEROFDAYSSPONSORED
		,CANCELLATIONREASON
		,ADDEDBYID
		,CHANGEDBYID
		)
		values(
		@LogTypeCode
		,@ScanSession
		,@OriginalLetterSequenceID
		,@ScannerMessage
		,@Scanoutcome
		,@ChildID
		,@SponsorID
		,@CurrentChildProjectID
		,@SponsorLetterSubcategoryID
		,@DateSponsorshipCancelled
		,@NumberOfDaysSponsored
		,@CancellationReason
		,@ChangeAgentID
		,@ChangeAgentID
		)
	end
	
else  -- exception
	begin
		if @ExtraLetter = 0
			begin
				set @LogTypeCode = 0
				set @ScanOutcome = 'Place letter in exception stack. '
			end
		else -- extra letter exists
			begin
				set @LogTypeCode = 2
				Set @ScanOutcome = 'Place letter in Extra Letter stack. '		
			end
		
		-- Check for cancelled sponsorship
		select  @CancellationReason = sr.REASON, 
				@DateSponsorshipCancelled = sp.ENDDATE, 
				@NumberOfDaysSponsored = DATEDIFF(DAY, sp.STARTDATE, sp.ENDDATE)
		from dbo.SPONSORSHIP as sp
		join dbo.SPONSORSHIPTRANSACTION as st on sp.ID = st.CONTEXTSPONSORSHIPID
		join SPONSORSHIPREASON as sr on st.SPONSORSHIPREASONID = sr.ID
		where sp.statuscode = 2 
		and sp.SPONSORSHIPOPPORTUNITYID = @ChildID 
		and sp.CONSTITUENTID = @SponsorID   -- must include the constituentid of the sponsor from the bar code!

		if @DateSponsorshipCancelled is not null		
			Set @ScannerMessage = coalesce(@ScannerMessage, '') + '. The sponsorship was cancelled.  '
		
		set @NumberOfDaysSponsored = coalesce(@NumberOfDaysSponsored, 0)
		set @CancellationReason = coalesce(@CancellationReason,'')
		--set @SponsorLetterSequenceID = coalesce(@SponsorLetterSequenceID,0)
		--set @Scannermessage = RTRIM(@ScannerMessage)
		--set @OriginalLetterSequenceID = coalesce(@OriginalLetterSequenceID, 0)
		
		insert into dbo.USR_LETTERSCANNERLOG(
				LOGTYPECODE
				,SCANSESSION
				,ORIGINALSEQUENCEID
				,[DESCRIPTION]
				,SCANOUTCOME
				,CHILDID
				,SPONSORID
				,CHILDPROJECTID
				,LETTERSUBCATEGORYID
				,DATESPONSORSHIPCANCELLED
				,NUMBEROFDAYSSPONSORED
				,CANCELLATIONREASON
				,ADDEDBYID
				,CHANGEDBYID
				)
				values(
				@LogTypeCode
				,@ScanSession
				,@OriginalLetterSequenceID
				,@ScannerMessage
				,@Scanoutcome
				,@ChildID
				,@SponsorID
				,@CurrentChildProjectID
				,@SponsorLetterSubcategoryID
				,@DateSponsorshipCancelled
				,@NumberOfDaysSponsored
				,@CancellationReason
				,@ChangeAgentID
				,@ChangeAgentID
				)	
	end
	
commit
end try	

begin catch
	-- error
	ROLLBACK
	-- Raise an error with the details of the exception
	SELECT @ErrMsg = ERROR_MESSAGE(),
	 @ErrSeverity = ERROR_SEVERITY()

	RAISERROR(@ErrMsg, @ErrSeverity, 1)
end catch


end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
