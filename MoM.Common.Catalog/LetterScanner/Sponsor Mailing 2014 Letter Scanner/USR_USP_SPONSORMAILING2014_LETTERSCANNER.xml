<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="867318f2-1b1f-47fc-8bb3-26a01f4ffe02"
	Name="USR_USP_SPONSORMAILING2014_LETTERSCANNER"
	Description="Does the work for CRM Sponsor 2014 mailing scanner."
	Author="Memphis Sellers"
	SPName="USR_USP_SPONSORMAILING2014_LETTERSCANNER"
	GrantServiceRolePermission="true"	
	>

	<!-- 
	Remarks:    This is basically a copy of the Sponsor Appeal Letter Scanner.  Does the same thing, except
				it creates an Acknowledgment Card Interaction on the Child.

	History:
	Date            Modified By     Comments
	15-Apr-2014		Memphis			Initial Version.
	24-Apr-2014		Memphis			Additions from Pamela:
									Child Interaction status should be Pending.
									Check for existing Child Interaction before adding another.
									Expected Date of Child Interaction is last day of 3 months from scan date.
	-->	
	
	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_SPONSORMAILING2014_LETTERSCANNER
	@SponsorLookupID nvarchar(6),		
	@AppealName nvarchar(10),
	@FinderNumber bigint,
	@ChildLookupID nvarchar(7) = null,		-- This can be blank!
	@ChangeAgentID uniqueidentifier,
	@ScanSession nvarchar(68),
	@ScannerMessage nvarchar(1000) OUTPUT,
	@ScanOutcome nvarchar(1000) OUTPUT,
	@ExceptionOccurred bit OUTPUT

as
begin
	/*
	 the appeal for this is: Appeal is 10558 - Sponsor Retention 2014
	*/
	
	declare @CancellationReason as nvarchar(100);
	declare @ChildEducationalAppealResponseSubcategoryID as uniqueidentifier;
	declare @ChildID as uniqueidentifier;
	declare @OriginalInteractionID as uniqueidentifier;
	declare @OriginalLetterSequenceID as int;
	declare @OriginalLetterSubcategoryID as uniqueidentifier;
	declare @CurrentChildProjectID as uniqueidentifier;		-- holds the current project id of the child, used to compare if child changed projects
	declare @ConstituentID uniqueidentifier;
	declare @CurrentDate as datetime;
	declare @Date as datetime;
	declare @DateSponsorshipCancelled as datetime;
	declare @ErrMsg nvarchar(4000);
	declare @ErrSeverity int;
	declare @ExtraLetter as bit;
	declare @InteractionTypeCode as uniqueidentifier;
	declare @LogTypeCode as tinyint;
	declare @NewID as uniqueidentifier;
	declare @NumberOfDaysSponsored smallint;
	declare @SponsorID as uniqueidentifier
	declare @SponsorLetterSequenceID as int;
	declare @SponsorLetterSubcategoryID as uniqueidentifier;
--	declare @StatusCodeCompleted as tinyint
	declare @StatusCodeCancelled as tinyint;
	declare @StatusCodePending as tinyint;
	declare @TempTable TABLE(SponsorLetterSequenceID int);
	declare @isMajorDonor bit = 0;   -- flag that identifies if this is a major donor appeal letter, if so then won't have child id and need to find all its sponsored kids
	declare @appealId uniqueidentifier;
	declare @appealResponseCreated bit = 0;   --flag to indicate if appeal response was created or not
	declare @11_20ChildrenMktsegmentId uniqueidentifier;
	declare @Over20ChildrenMktsegmentId uniqueidentifier;
	declare @childIDList dbo.USR_UDT_CHILDIDLIST;
	declare @constituentAppealId uniqueidentifier;
	declare @sponsoredChildCount int = 0;
	declare @interactionComment nvarchar(100) = 'from Sponsor Retention 2014 scanner';
	declare @isCancelledSponsorship bit = 0;
	declare @isChildIneligible bit = 0;
	declare @expectedDate datetime = Cast(DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE())+4,0)) as date);   -- last day of the month that is 3 months from the date scanned [today]

	--   the RESPONSECATEGORY will be whatever they want to use for each Response,
	--   the RESPONSEID will point to the Response of "Yes" or whatever it is for the given RESPONSECATEGORY
	declare @RESPONSECATEGORYID uniqueidentifier;
	declare @RESPONSEID uniqueidentifier;

	select @RESPONSECATEGORYID = ID 
	from dbo.RESPONSECATEGORY
	where lower([NAME]) = lower('Appeal Response Received');  

	select @RESPONSEID = ID
	from dbo.RESPONSE
	where dbo.RESPONSE.RESPONSECATEGORYID = @RESPONSECATEGORYID
	and lower(dbo.RESPONSE.RESPONSE) = lower('Yes')   
	and dbo.RESPONSE.ISINACTIVE = 0

	if @ChildLookupID is null or @ChildLookupID = ''
		set @isMajorDonor = 1;

	-- Get interaction type code of 'Mail'
	set @InteractionTypeCode = (select ID from dbo.INTERACTIONTYPECODE where LOWER(DESCRIPTION) = 'mail')

	-- Set constants
	set @StatusCodePending = 1;
--	set @StatusCodeCompleted = 2;
	set @StatusCodeCancelled = 4;

	set @ExtraLetter = 0
	set @ExceptionOccurred = 0

	if @ChangeAgentID is null
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @ChangeAgentID output;

	-- lookup the major donor mkt segments:
	select @11_20ChildrenMktsegmentId = ID
	from dbo.MKTSEGMENT
	where NAME like '%Correspondents of 11-20 children%'

	select @Over20ChildrenMktsegmentId  = ID
	from dbo.MKTSEGMENT
	where NAME like '%Correspondents of 21+ children%'

	-- validate Sponsor ID
	if @ExceptionOccurred = 0
	begin
		set @SponsorID = (select ID from dbo.CONSTITUENT where LOOKUPID = @SponsorLookupID)
		if @SponsorID is null
			begin
				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Sponsor ID not found. '
				set @ExceptionOccurred = 1
			end
	end

	-- validate Child ID
	if @ExceptionOccurred = 0
	begin
	  -- if we have a major donor then there will be no child lookup id value, so if not a major donor, verify the child Id value:
	  if (@ChildLookupID is not null and @ChildLookupID <> '')
	    begin
	  		set @ChildID = (select ID from dbo.SPONSORSHIPOPPORTUNITY where LOOKUPID = @ChildLookupID)
	  		If @ChildID is null
	  			begin
	  				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child ID not found. '
	  				set @ExceptionOccurred = 1
	  			end
	    end
	end


	--get the child's project id so we can populate it in the interactionextension:
	if @ExceptionOccurred = 0
	begin
		set @CurrentChildProjectID = (select SPONSORSHIPLOCATIONID from dbo.SPONSORSHIPOPPORTUNITY where ID = @ChildID)
	end

	-- Socio-Emotional Response type
	if @ExceptionOccurred = 0
	begin
		set @ChildEducationalAppealResponseSubcategoryID = (select ID from dbo.INTERACTIONSUBCATEGORY where LOWER(NAME) = lower('Socio-Emotional Appeal Response'))
		if @ChildEducationalAppealResponseSubcategoryID is null
			begin
				set @ExceptionOccurred = 1
				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Socio-Emotional Appeal Response subcategory not found. '
			end
	end

	-- begin tran here since we are about to update and create records
	begin try
		begin tran

			-- Create Appeal Response for Sponsor, if one doesn't already exist for this Appeal.
			if @ExceptionOccurred = 0
			begin
				-- Try & locate the Appeal given the Finder # if the finder number value isn't -1
			  if @FinderNumber <> -1 
			    begin
			      select @constituentAppealId = ID,
			             @appealId = dbo.CONSTITUENTAPPEAL.APPEALID
			      from dbo.CONSTITUENTAPPEAL
			      where dbo.CONSTITUENTAPPEAL.FINDERNUMBER = @FinderNumber; 
			    end
			  else
			    begin
			      -- locate the appeal using the appeal id value
			      declare @appealCount integer;

			      select @appealCount = count(*)
			      from dbo.APPEAL
			      where [NAME] like '%' + @AppealName + '%';
			      
			      if @appealCount <> 1
			        begin
						-- we can't find the correct appeal so unable to continue:
			  			set @ExceptionOccurred = 1
			  			set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Unable to locate the Appeal Name. '
			        end
			      else
			        begin
			          -- only have one, so get the appeal ID for it:
			          select @constituentAppealId = ID
			          from dbo.CONSTITUENTAPPEAL
			          where dbo.CONSTITUENTAPPEAL.APPEALID = (select ID
			                                                  from dbo.APPEAL
			                                                  where [NAME] like '%' + @AppealName + '%')
			          and CONSTITUENTID = @SponsorID;
			        end
			        
			    end
			  

			  if @constituentAppealId is not null
			    begin
			      -- check for the response & if not found, create a new one:
			      -- use this UFN to check if there's already a response for this Sponsor's Appeal:
			      if not exists (select 1 from dbo.UFN_CONSTITUENTAPPEAL_GETRESPONSES(@constituentAppealId) where RESPONSECATEGORY = @RESPONSECATEGORYID and RESPONSEID = @RESPONSEID)
			        begin
			          -- insert the Response now for this Sponsor (Constituent):
			          insert into [CONSTITUENTAPPEALRESPONSE] 
			          	([CONSTITUENTAPPEALID], 
			            [DATE],
			            --[ID],
			            [RESPONSEID],				
			            ADDEDBYID, 
			            CHANGEDBYID)
			          values (@constituentAppealId, 
			            getdate(),
			            --[ID],
			            @RESPONSEID, 
			            @CHANGEAGENTID, 
			            @CHANGEAGENTID)

			          -- set the flag to indicate that the appeal response was created
			          set @appealResponseCreated = 1;
			        end
			        
			        -- check if this sponsor is a major donor, based on the Mkt Segements:
			        if exists (select 1
			                  from dbo.CONSTITUENTAPPEAL
			                  join dbo.MKTSEGMENTATIONSEGMENT ON dbo.MKTSEGMENTATIONSEGMENT.ID = dbo.CONSTITUENTAPPEAL.MKTSEGMENTATIONSEGMENTID
			                  join dbo.MKTSEGMENTATION ON dbo.MKTSEGMENTATION.ID = dbo.MKTSEGMENTATIONSEGMENT.SEGMENTATIONID
			                  where (dbo.CONSTITUENTAPPEAL.ID = @constituentAppealId
			                  and (SEGMENTID = @11_20ChildrenMktsegmentId or SEGMENTID = @Over20ChildrenMktsegmentId)))
			          set @isMajorDonor = 1;
			        else
			          set @isMajorDonor = 0;
			          
			        -- double check that the Child ID exists if this is not a major donor:
			        if (@isMajorDonor = 0 and (@ChildLookupID is null or @ChildLookupID='')) or (@isMajorDonor = 1 and @ChildLookupID <> '')              
					  begin
						-- cannot continue
						set @ExceptionOccurred = 1
						set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child Lookup ID is blank and Sponsor is not a Major Donor. '
						-- set the flag to indicate that the appeal response was created so we'll know to create the child interaction even though the exception bit may be 1
						set @appealResponseCreated = 0;
			          end

			    end      
			  else
			    begin
					set @ExceptionOccurred = 1
					set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Unable to locate the Appeal for this Finder Number. '
				    -- set the flag to indicate that the appeal response was created so we'll know to create the child interaction even though the exception bit may be 1
				    set @appealResponseCreated = 0;
			    end
			end
			    
			-- child Educational Appeal Response interaction creation pre-check
			-- only care about ineligible children & cancelled sponsorships: nothing else matters...
			if @ExceptionOccurred = 0
				begin
					-- Child departed (ineligible)
					--	when 0 then 'Pending', when 1 then 'Eligible',	when 2 then 'Ineligible'	
					if exists (select 1 from dbo.SPONSORSHIPOPPORTUNITY where ID = @ChildID and ELIGIBILITYCODE = 2)
						begin
							set @ExceptionOccurred = 1;
							set @isChildIneligible = 1;
							set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child is ineligible -  DO NOT SEND letter to field. ';
							set @interactionComment = 'Ineligible - child is ineligible';
						end
				    
				  -- check for a cancelled sponsorship for this child:
				  -- don't check for a cancelled sponsorship if the child's already ineligible
				  if @ExceptionOccurred = 0
				    begin
				      if exists (
				        select 1 
				        from dbo.SPONSORSHIP a
				        where a.ENDDATE = (select max(ENDDATE) from dbo.SPONSORSHIP b where a.ID = b.ID and STATUSCODE = 2 and SPONSORSHIPOPPORTUNITYID = @childId and CONSTITUENTID =@sponsorId)
				        and a.STATUSCODE = 2
				        and a.SPONSORSHIPOPPORTUNITYID = @childId
				        and a.CONSTITUENTID =@sponsorId)
				          begin
							-- if there is a cancelled sponsorship, then check for any active sponsorship for
							-- the child/sponsor combination:
							if not exists (select 1 
								from dbo.SPONSORSHIP 
								where (STATUSCODE = 1
								and SPONSORSHIPOPPORTUNITYID = @childId
								and CONSTITUENTID =@sponsorId))
								begin
				      				set @ExceptionOccurred = 1;
									set @isCancelledSponsorship = 1;
				      				set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child is no longer sponsored - DO NOT send letter to field. ';
									set @interactionComment = 'Cancelled - child is no longer sponsored.';
								end
				          end
				    end
				end


			-- create Socio-Emotional Appeal Response interaction on the child:
			set @Date = CONVERT(DATE,GETDATE())
			set @NewID = NEWID()

			if @ExceptionOccurred = 0 or @appealResponseCreated = 1
				begin
				  if @isMajorDonor = 0
				  	begin
						declare @StatusCodeValue tinyint;

						if (@isCancelledSponsorship = 1 or @isChildIneligible = 1)
							set @StatusCodeValue = @StatusCodeCancelled;
						else
							set @StatusCodeValue = @StatusCodePending;
							
						-- Per Pamela, only create a new Child Interaction if the child doesn't already have one within last 12 months (Expected Date)
						-- ExpectedDate >= DATEADD(year,-1,GETDATE())
						if not exists (select 1 from dbo.INTERACTION 
										where (CONSTITUENTID = @ChildID and INTERACTIONSUBCATEGORYID = @ChildEducationalAppealResponseSubcategoryID and EXPECTEDDATE >=DATEADD(year,-1,GETDATE())))
							begin
						  		INSERT INTO dbo.INTERACTION(
						  			ID
						  			,CONSTITUENTID
						  			,INTERACTIONTYPECODEID
						  			,EXPECTEDDATE
						  			,ACTUALDATE
						  			,STATUSCODE
						  			,INTERACTIONSUBCATEGORYID
						  			,OBJECTIVE
									,COMMENT
						  			,ADDEDBYID
						  			,CHANGEDBYID
						  			,DATEADDED
						  			,DATECHANGED
						  			)
						  		VALUES(
						  			@NewID
						  			,@ChildID
						  			,@InteractionTypeCode
						  			,@expectedDate
						  			,null   
						  			,@StatusCodeValue
						  			,@ChildEducationalAppealResponseSubcategoryID
						  			,'Retention Response Received'
									,@interactionComment
						  			,@ChangeAgentID
						  			,@ChangeAgentID
						  			,GETDATE()
						  			,GETDATE()
						  			)

						  		INSERT INTO dbo.USR_INTERACTIONEXTENSION(
							  		ID, 
							  		COMPLETEDBYID, 	
							  		CHILDID,
							  		SPONSORID, 
							  		SCANSESSION, 
							  		CHILDPROJECTID, 
									APPEALID,
							  		ADDEDBYID, 
							  		CHANGEDBYID, 
							  		DATEADDED, 
							  		DATECHANGED
						  		)
						  		VALUES (
							  		@NewID, 
							  		@ChangeAgentID, 
							  		@ChildID,
							  		@SponsorID,
							  		@ScanSession, 
							  		@CurrentChildProjectID, 
									@appealId,
							  		@ChangeAgentID, 
							  		@ChangeAgentID, 
							  		GETDATE(), 
							  		GETDATE()
						  		)							

					  			set @ScannerMessage = coalesce(@ScannerMessage, '') + 'Child interaction created.  '
						end
					else
						begin
							set @ExceptionOccurred = 1
							set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child already has Socio-Emotional Appeal Response Interaction. '
						end
						
				  	end
				else
				  begin
				    -- this is a Major Donor, get all the children currently actively sponsored by this sponsor and
				    -- then create interactions for them all:
				    -- use this UFN:  USR_UFN_SPONSORSHIP_GETACTIVELYSPONSOREDCHILDREN_FORSPONSOR
				    insert @childIDList 
						select *
						from dbo.USR_UFN_SPONSORSHIP_GETACTIVELYSPONSOREDCHILDREN_FORSPONSOR(@sponsorId)
				    
				    -- get the number of sponsored children for use later in the scan results message:
				    select @sponsoredChildCount = count(*)
				    from @childIDList;
				    
				    -- loop through the child list to create the interaction & interaction extension records:
				    declare ChildrenCursor cursor local fast_forward for
						select
							SPONSORSHIPOPPORTUNITYCHILDID
						from
							@childIDList
					
				  	declare @SPONSORSHIPOPPORTUNITYCHILDID uniqueidentifier;
				  		
				  	open ChildrenCursor;
				  				
				  	fetch next from ChildrenCursor into @SPONSORSHIPOPPORTUNITYCHILDID;
				        
				  	while (@@FETCH_STATUS = 0)
				  	begin					    
						set @NewID = NEWID();
				      
						-- get the child project id
						set @CurrentChildProjectID = (select SPONSORSHIPLOCATIONID from dbo.SPONSORSHIPOPPORTUNITY where ID = @SPONSORSHIPOPPORTUNITYCHILDID)
				      
						-- Per Pamela, only create a new Child Interaction if the child doesn't already have one within last 12 months (Expected Date)
						if not exists (select 1 from dbo.INTERACTION 
									   where (CONSTITUENTID = @SPONSORSHIPOPPORTUNITYCHILDID and INTERACTIONSUBCATEGORYID = @ChildEducationalAppealResponseSubcategoryID and EXPECTEDDATE >=DATEADD(year,-1,GETDATE())))
							begin					  					  
							    -- create the interactions
						  		INSERT INTO dbo.INTERACTION(
						  			ID
						  			,CONSTITUENTID
						  			,INTERACTIONTYPECODEID
						  			,EXPECTEDDATE
						  			,ACTUALDATE
						  			,STATUSCODE
						  			,INTERACTIONSUBCATEGORYID
						  			,OBJECTIVE
						        	,COMMENT
						  			,ADDEDBYID
						  			,CHANGEDBYID
						  			,DATEADDED
						  			,DATECHANGED
						  			)
						  		values ( 
						  			@NewID
						  			,@SPONSORSHIPOPPORTUNITYCHILDID
						  			,@InteractionTypeCode
						  			,@expectedDate
						  			,null
						  			,@StatusCodePending
						  			,@ChildEducationalAppealResponseSubcategoryID
						  			,'Retention Response Received'
						        	,@interactionComment
						  			,@ChangeAgentID
						  			,@ChangeAgentID
						  			,GETDATE()
						  			,GETDATE()
						        );

						  		INSERT INTO dbo.USR_INTERACTIONEXTENSION(
						  		ID, 
						  		COMPLETEDBYID, 	
						  		CHILDID,
						  		SPONSORID, 
						  		SCANSESSION, 
						  		CHILDPROJECTID, 
								APPEALID,
						  		ADDEDBYID, 
						  		CHANGEDBYID, 
						  		DATEADDED, 
						  		DATECHANGED
						  		)
						  		VALUES (
						  		@NewID, 
						  		@ChangeAgentID, 
						  		@SPONSORSHIPOPPORTUNITYCHILDID,
						  		@SponsorID,
						  		@ScanSession, 
						  		@CurrentChildProjectID, 
								@appealId,
						  		@ChangeAgentID, 
						  		@ChangeAgentID, 
						  		GETDATE(), 
						  		GETDATE()
						  		)
				      		end
						else
							begin
								--set @ExceptionOccurred = 1
								set @ScannerMessage = coalesce(@ScannerMessage, '') + ' Child already has Socio-Emotional Appeal Response Interaction. '
							end
				    	
						fetch next from ChildrenCursor into @SPONSORSHIPOPPORTUNITYCHILDID;
				    end
				    
				    close ChildrenCursor;
				    
					set @ScannerMessage = coalesce(@ScannerMessage, '') + 'Child interactions created.  ';
				        
				  end
				end


			-- SCAN LOG
			-- Success
			set @SponsorLetterSequenceID = coalesce(@SponsorLetterSequenceID,0)
			--set @Scannermessage = RTRIM(@ScannerMessage)
			set @OriginalLetterSequenceID = coalesce(@OriginalLetterSequenceID, 0)


			set @NumberOfDaysSponsored = 0
			set @CancellationReason = ''	

			if @ExceptionOccurred = 0
			begin
				set @ScannerMessage = coalesce(@ScannerMessage, '') + 'Scan successful. '
			  
			  if @isMajorDonor = 1
			    begin
			      set @ScannerMessage = coalesce(@ScannerMessage, '') + 'Major Donor sponsor: copy letters for ' + Cast(@sponsoredChildCount as nvarchar(10)) + ' sponsored children '
			    end
			    
				set @LogTypeCode = 1 -- Success
				set @ScanOutcome = 'Place letter on successful scan stack. '
			end
			else
			begin
				set @LogTypeCode = 0 -- failure
				set @ScanOutcome = 'Place letter in exception stack. '
			end
				
			insert into dbo.USR_LETTERSCANNERLOG(
			LOGTYPECODE
			,SCANSESSION
			,[DESCRIPTION]
			,SCANOUTCOME
			,CHILDID
			,SPONSORID
			,CHILDPROJECTID
			,LETTERSUBCATEGORYID
			,ADDEDBYID
			,CHANGEDBYID
			)
			values(
			@LogTypeCode
			,@ScanSession
			,@ScannerMessage
			,@Scanoutcome
			,@ChildID
			,@SponsorID
			,@CurrentChildProjectID
			,@ChildEducationalAppealResponseSubcategoryID
			,@ChangeAgentID
			,@ChangeAgentID
			)

		commit
	end try	

	begin catch
		-- error
		ROLLBACK
		-- Raise an error with the details of the exception
		SELECT @ErrMsg = ERROR_MESSAGE(),
		 @ErrSeverity = ERROR_SEVERITY()

		RAISERROR(@ErrMsg, @ErrSeverity, 1)
	end catch

end
		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
